var searchIndex = {};
searchIndex["cty"] = {"doc":"Type aliases to C types like c_int for use with bindgen","items":[[4,"c_void","cty","",null,null],[6,"c_char","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_short","","",null,null],[6,"c_longlong","","",null,null],[6,"c_uchar","","",null,null],[6,"c_ushort","","",null,null],[6,"c_ulonglong","","",null,null]],"paths":[]};
searchIndex["photon_core"] = {"doc":"Concurrency primitives for the Particle photon","items":[[3,"App","photon_core","Application context",null,null],[3,"Cloud","","Cloud function context",null,null],[3,"Resource","","A global resource that can be shared between different contexts",null,null],[8,"Ctxt","","Implementation detail. Do not implement this trait.",null,null],[11,"delay_ms","","Waits for `ms` milliseconds",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"new","","Creates a new `Resource` with some initial `value`",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"access","","Grants immutable access to the resource",1,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"ref"}}],[11,"access_mut","","Grants mutable access to the resource",1,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"refmut"}}]],"paths":[[3,"App"],[3,"Resource"]]};
searchIndex["photon_hal"] = {"doc":"Low level bindings to the Particle HAL","items":[[3,"String","photon_hal","",null,null],[3,"UsbSerial","","",null,null],[3,"D0","","",null,null],[3,"D1","","",null,null],[3,"D2","","",null,null],[3,"D3","","",null,null],[3,"D4","","",null,null],[3,"D5","","",null,null],[3,"D6","","",null,null],[3,"D7","","",null,null],[3,"A0","","",null,null],[3,"A1","","",null,null],[3,"A2","","",null,null],[3,"A3","","",null,null],[3,"A4","","",null,null],[3,"A5","","",null,null],[4,"PinMode","","",null,null],[13,"Input","","",0,null],[13,"InputPulldown","","",0,null],[13,"InputPullup","","",0,null],[13,"Output","","",0,null],[5,"device_id","","Returns the ID of the Particle device",null,{"inputs":[],"output":{"name":"string"}}],[5,"delay_ms","","Waits for `ms` milliseconds",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"delay_us","","Waits for `us` microseconds",null,{"inputs":[{"name":"u32"}],"output":null}],[0,"cloud","","",null,null],[5,"function","photon_hal::cloud","Registers a new cloud function with the given `name`",null,null],[5,"variable","","Registers a new cloud variable with the given `name`",null,{"inputs":[{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[8,"IntRef","","Implementation detail. Do not implement this trait.",null,null],[10,"as_ptr","","",1,null],[0,"ll","photon_hal","Low level bindings to the HAL",null,null],[3,"spark_variable_t","photon_hal::ll","",null,null],[12,"size","","",2,null],[12,"update","","",2,null],[4,"c_void","","",null,null],[4,"PinMode","","",null,null],[13,"INPUT","","",3,null],[13,"OUTPUT","","",3,null],[13,"INPUT_PULLUP","","",3,null],[13,"INPUT_PULLDOWN","","",3,null],[13,"AF_OUTPUT_PUSHPULL","","",3,null],[13,"AF_OUTPUT_DRAIN","","",3,null],[13,"AN_INPUT","","",3,null],[13,"AN_OUTPUT","","",3,null],[13,"PIN_MODE_NONE","","",3,null],[4,"Spark_Data_TypeDef","","",null,null],[13,"CLOUD_VAR_BOOLEAN","","",4,null],[13,"CLOUD_VAR_INT","","",4,null],[13,"CLOUD_VAR_STRING","","",4,null],[13,"CLOUD_VAR_DOUBLE","","",4,null],[5,"HAL_Delay_Milliseconds","","like `delay` but prevents the system thread from running",null,null],[5,"HAL_Delay_Microseconds","","`delayMicroseconds`",null,null],[5,"HAL_device_ID","","Low level version of `deviceID`",null,null],[5,"HAL_GPIO_Read","","`digitalWrite`",null,null],[5,"HAL_GPIO_Write","","`digitalRead`",null,null],[5,"HAL_Pin_Mode","","`pinMode`",null,null],[5,"USB_USART_Init","","`Serial.begin`",null,null],[5,"USB_USART_Send_Data","","`Serial.write`",null,null],[5,"system_delay_ms","","`delay`",null,null],[5,"spark_function","","`Particle.function`",null,null],[5,"spark_variable","","`Particle.variable`",null,null],[5,"spark_deviceID","","`deviceID`",null,null],[6,"pin_t","","",null,null],[6,"p_user_function_int_str_t","","",null,null],[17,"LED","photon_hal","",null,null],[11,"deref","","",5,null],[11,"begin","","Enables the serial channel with the specified `baud_rate`",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write","","Writes binary data to the serial port",6,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"pin_mode","","",7,{"inputs":[{"name":"self"},{"name":"pinmode"}],"output":null}],[11,"pin_mode","","",8,{"inputs":[{"name":"self"},{"name":"pinmode"}],"output":null}],[11,"pin_mode","","",9,{"inputs":[{"name":"self"},{"name":"pinmode"}],"output":null}],[11,"pin_mode","","",10,{"inputs":[{"name":"self"},{"name":"pinmode"}],"output":null}],[11,"pin_mode","","",11,{"inputs":[{"name":"self"},{"name":"pinmode"}],"output":null}],[11,"pin_mode","","",12,{"inputs":[{"name":"self"},{"name":"pinmode"}],"output":null}],[11,"pin_mode","","",13,{"inputs":[{"name":"self"},{"name":"pinmode"}],"output":null}],[11,"pin_mode","","",14,{"inputs":[{"name":"self"},{"name":"pinmode"}],"output":null}],[11,"high","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"low","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"high","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"low","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"high","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"low","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"high","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"low","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"high","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"low","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"high","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"low","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"high","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"low","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"high","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"low","","",14,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[4,"PinMode"],[8,"IntRef"],[3,"spark_variable_t"],[4,"PinMode"],[4,"Spark_Data_TypeDef"],[3,"String"],[3,"UsbSerial"],[3,"D0"],[3,"D1"],[3,"D2"],[3,"D3"],[3,"D4"],[3,"D5"],[3,"D6"],[3,"D7"]]};
searchIndex["static_ref"] = {"doc":"References that point into `static` data","items":[[3,"Ref","static_ref","`&'a T` that points into `static` data",null,null],[3,"RefMut","","`&'a mut T` that points into `static` data",null,null],[8,"StaticRef","","A reference that points into `static` data",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"new","","Asserts that `ref_` points into `static` data",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Asserts that `ref_mut` points into `static` data",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"Ref"],[3,"RefMut"]]};
initSearch(searchIndex);
